

Linux file permissons
=====================

Types of permissions
1.Basic file/folder permissions
2.Special file/folder permissions
3.Access control list (ACL)

Basic file/folder permissions
========================================

To check the default permission of a file/folder
================================================
# ls -l
# ll

-rw-r--r-- 1 root root 292 Dec  9 12:59 testfile1
drwxr-xr-x 2 root root 54 Dec  8 16:10 secure

Fields in ls -l command output
===============================
<file type> <file permission> <link count> <owner> <group> <file size> <last modify date and time> <file name

File  type		      User		Group		Others
====  ====          ====    =====   ======
d     Directory		  rwx		  r-x		  r-x
-     Regular file	rw-		  r--		  r--
l     Symbolic Link	rwx		  rwx		  rwx



ls COMMAND options
=================================
#ls -iadRrlt
i to list the file's i node number
a to list the hidden files and folders
d to list only directories
R to list the tree structure of a directory
l to list the all information about files and folders
r to list file and folders in reverse order
t to list files and folders according to time stamp

FILE
====
Read :- Permission to read the file content
Write :- permission to modify the content
Execute :- permission to run the script

Director/Folder
==========
Read :- permission to list the contents (ls)
Write :- permission to create or delete file/folder
Execute :- permission to change directory

In Linux, There are three general classes of access (access levels):
================================================
User (u) The user who owns the file.
Group (g) Users belonging to the file's defined ownership group.
Others (o) Everyone else.

To change the default permission of a file/directory
=====================================================
# chmod (permission value) <file/directory > 

We can use two method to set permissions to files/directories
=============================================================
1.octal or numaric  -->421
2.symbolic --> rwx

values
======
read - 4
write - 2
execute - 1


rw 	rw	rw
6	  6	  6

1.Numaric method
================
#chmod 744 <file/directory>
#chmod 744 <file/directory>
#chmod 440 <file/directory>
#chmod 244 <file/directory>


2.Symbolic method
=================
#chmod u=rwx,g=rw,o=r <files/directory>
#chmod u-x,g-rw,o+r <files/directory>
#chmod a=rwx testfile1
#chmod a-wx testfile1
#chmod a+wx testfile

Who (Letter)	Meaning
====================
u		user
g		group
o		others
a		all



Default permission for files/Directory
----------------------------------------

normal user
775 - directory
664 - file

root
755 - directory
644 - file


directory
-------------
777
022 -
----
755

666
022-
----
644

777
221-
----
556

777
777-
-----
000

umask
------

The user file creation mode mask (umask) is use to determine the file permission for newly
created files. It can be used to control the default file permission for new files.

umask value for root user -022

umask value for Normal user -002

full permission for file =666
full permission for directory-777


calculate default permission

full permission - umask = default permission

root users
--------------
File

 666
-022
----- 
 644

Directory

 777
-022
------
 755


Normal users
---------------

file

 666
-022
----- 
 644

Directory

 777
-022
------
 755


To chage umask value for individual user we need to put entry on .bash_profile

umask 222

To chage umask value for all users we need to modify value in /etc/profile

To change the default ownership of a file/directory
=====================================================
To change both
===============
#chown <owner>:<group> <files/directory>

#chown -R <owner>:<group> <files/directory>

#chown <owner>: <files/directory>


owner only
------------
#chown <owner> <files/directory>

only group
-----------
#chown :<group> <files/directory>
#chgrp <group> <files/directory>

chmod - command to set permission to files/directoreis
chown - command to change owner and group name of files/directories
chgrp - command to change group name files/directories

                   Part 1
-----------------------------------------------------------------------------------------------------------------------------------
Theory Interview Questions & Answers (Linux File Permissions)
----------------------------------------------------------------------------------------------------------------------------------
1. What are Linux file permissions?
Answer: 
Linux file permissions determine who can read, write, or execute a file or directory. They ensure security by controlling access.
There are three permission types:
r (read) ‚Äì View contents of file or list directory.
w (write) ‚Äì Modify file contents or create/delete inside directory.
x (execute) ‚Äì Run a file as a program or enter a directory.

2. What are the different categories of users for file permissions?
Answer:
Owner (u) ‚Äì The user who created the file.
Group (g) ‚Äì Users who belong to the file‚Äôs group.
Others (o) ‚Äì All other users on the system.

3. How can you view file permissions in Linux?
Answer:
Use the ls -l command:
ls -l file.txt
Output example:
-rwxr-xr--  1 user group  120 Sep 25 12:00 file.txt
Here:
- ‚Üí regular file
rwx ‚Üí owner permissions
r-x ‚Üí group permissions
r-- ‚Üí others permissions

4. What are numeric (octal) file permissions?
Answer:
Permissions can also be represented as numbers:
4 = read, 2 = write, 1 = execute
Example: chmod 754 file.txt ‚Üí
Owner = 7 (rwx)
Group = 5 (r-x)
Others = 4 (r--)

5. What are special file permission bits in Linux?
Answer:
SUID (Set User ID, 4000): Run with file owner‚Äôs permissions.
SGID (Set Group ID, 2000): Run with group‚Äôs permissions.
Sticky bit (1000): On directories, only owner can delete files inside.

6. What‚Äôs the difference between chmod, chown, and chgrp?
Answer:
chmod ‚Üí change file permissions
chown ‚Üí change file owner
chgrp ‚Üí change file group

7. What happens if a directory does not have execute permission?
Answer:
You can list the contents (ls) if you have read (r) permission, but you cannot enter the directory (cd) or access files inside without execute (x) permission.

8. What is the default umask value and its role?
Answer:
umask defines default file permissions when a new file/directory is created.
Example:
Default umask = 022
New file ‚Üí 666 ‚Äì 022 = 644 (rw-r--r--)
New directory ‚Üí 777 ‚Äì 022 = 755 (rwxr-xr-x)

-----------------------------------------------------------------------------------------------------------------------------------------
                              Part 2
Practical Interview Questions & Answers (Hands-On)
------------------------------------------------------------------------------------------------------------------------------------------
1.How would you make a script executable only by the owner?
Answer:
chmod 700 script.sh
Owner ‚Üí rwx, Group ‚Üí ---, Others ‚Üí ---.

2. How to give read and write permissions to the group only?
Answer:
chmod g+rw file.txt
Now the group can read/write the file.

3. How do you remove write permission for others on a directory?
Answer:
chmod o-w /mydir
Removes write permission from ‚Äúothers‚Äù.


4. You have a shared directory /project. You want all files created inside it to belong to the same group. How will you do it?
Answer:
chgrp developers /project
chmod g+s /project
The SGID bit ensures all new files inherit the group developers.


5. How to set a sticky bit on /shared so users cannot delete others‚Äô files?
Answer:
chmod +t /shared
ls -ld /shared
Output shows drwxrwxrwt ‚Üí t means sticky bit applied.


6. A file has permissions -rw-rw-rw-. What‚Äôs the octal representation?
Answer:
666 ‚Üí read/write for owner, group, others.


7. You created a file secret.txt. How do you make it accessible only to you?
Answer: 
chmod 600 secret.txt
Only owner can read/write.


8. How do you change ownership of a file from user alice to bob?
Answer:
chown bob file.txt


9. How can you check effective permissions of a file for a user?
Answer:
namei -l file.txt
or
ls -l file.txt
and check ownership/group of the file and user‚Äôs groups using id.


10. A script must always run as root, even if executed by a normal user. How do you configure this?
Answer:
chown root script.sh
chmod 4755 script.sh


This sets SUID, so it runs with root privileges.

---------------------------------------------------------------------------------------------------------------------------------------------
üìù Linux File Permissions ‚Äì Cheat Sheet
---------------------------------------------------------------------------------------------------------------------------------------------
1. Permission Basics
r = 4 (read) ‚Üí View file / list directory
w = 2 (write) ‚Üí Modify file / create-delete in dir
x = 1 (execute) ‚Üí Run file / enter dir


2. Permission Categories
u (user/owner)
g (group)
o (others)
a (all: u+g+o)


3. View Permissions
ls -l file.txt
Example:
-rwxr-xr--
Owner = rwx
Group = r-x
Others = r--


4. Change Permissions
Symbolic mode:
chmod u+x file.sh   # add execute to owner
chmod g-w file.txt  # remove write for group
chmod o=r file.txt  # others only read
Numeric (octal) mode:

7 = rwx

6 = rw-

5 = r-x

4 = r--

chmod 755 script.sh   # rwx r-x r-x
chmod 644 file.txt    # rw- r-- r--


5. Change Ownership
chown user file.txt     # change owner
chgrp devs file.txt     # change group
chown user:group file   # change both


6. Special Permissions
SUID (4xxx): Run with owner‚Äôs privileges
chmod 4755 file.sh
SGID (2xxx): Run with group‚Äôs privileges / new files inherit group
chmod 2755 /dir
Sticky Bit (1xxx): Only owner can delete files in shared dir
chmod +t /shared
Shows as: drwxrwxrwt



7. Default Permissions ‚Äì umask
Check:
umask
Default new file permission = 666 ‚Äì umask
Default new dir permission = 777 ‚Äì umask

Example:
umask 022 ‚Üí files = 644, dirs = 755


8. Practical Scenarios
‚úÖ Script only owner can run:
chmod 700 script.sh

‚úÖ File only you can read/write:
chmod 600 secret.txt

‚úÖ Shared directory with group inheritance:
chmod g+s /project

‚úÖ Shared folder where users can‚Äôt delete each other‚Äôs files:
chmod +t /shared


9. Check Effective Permissions
namei -l file.txt   # show permission breakdown
id                  # check user groups


‚ö° Quick Octal Reference:

Value	Meaning
7	rwx
6	rw-
5	r-x
4	r--
3	-wx
2	-w-
1	--x
0	---
=========================================================================================================================
1.how do modifhy permission of a file?
  ANS: #chmod  a+rwx "File name"
u menan USER
g mean GROUP
O mean other
a mean all

