LINUX DISK MANAGEMENT
==============================


What is file system?
File System is a method to store and organize files and directories on disk. 
A file system can have different formats called file system types.
These formats determine how the information is stored as files and directories.

Hard disk & pendrive

Windows file system
====================

FAT 
FAT32
NTFS

Linux file system
====================
ext1
ext2
ext3
ext4 - Default file system in RHEL/OEL- 6
XFS - Default filesystem in RHEL/OEL - 7/8/9
BTRFS

swap

CD/DVD
=========

iso9660


Ext2
=====
1.Ext2 stands for second extended file system.	
2.Ext2 does not have journaling feature.
3.Maximum individual file size can be from 16 GB to 2 TB
4.Overall ext2 file system size can be from 2 TB to 32 TB


Ext3
======
1.Ext3 stands for third extended file system.
2.Starting from Linux Kernel 2.4.15 ext3 was available.
3.The main benefit of ext3 is that it allows journaling.
4.Journaling has a dedicated area in the file system, where all the changes are tracked. When the system crashes, the possibility of file system corruption is less because of journaling.
5.Maximum individual file size can be from 16 GB to 2 TB
6.Overall ext3 file system size can be from 2 TB to 32 TB
7.There are three types of journaling available in ext3 file system.
Journal – Metadata and content are saved in the journal.
Ordered – Only metadata is saved in the journal. Metadata are journaled only after writing the content to disk. This is the default.
Writeback – Only metadata is saved in the journal. Metadata might be journaled either before or after the content is written to the disk.
7.You can convert a ext2 file system to ext3 file system directly (without backup/restore).


Ext4
======
1.Ext4 stands for fourth extended file system.
2.It was introduced in 2008.
3.Starting from Linux Kernel 2.6.19 ext4 was available.
4.Supports huge individual file size and overall file system size.
5.Maximum individual file size can be from 16 GB to 16 TB
6.Overall maximum ext4 file system size is 1 EB (exabyte). 1 EB = 1024 PB (petabyte). 1 PB = 1024 TB (terabyte).
7.Directory can contain a maximum of 64,000 subdirectories (as opposed to 32,000 in ext3)

XFS File System
===================
1.The XFS file system is an extension of the extent file system. 
2.The XFS is a high-performance 64-bit journaling file system. 
3.The support of the XFS was merged into Linux kernel in around 2002 and In 2009 Red Hat Enterprise Linux version 5.4 usage of the XFS file system. 
4.XFS supports maximum file system size of 8 exbibytes for the 64-bit file system. 
5.There is some comparison of XFS file system is XFS file system can’t be shrunk and poor performance with deletions of the large numbers of files. 
6.Now, the RHEL 7.0 uses XFS as the default filesystem.





Create an ext4 file system:
==============================

#mkfs.ext4 /dev/sdb1
#mkfs -t ext4 /dev/sdb1
#mke2fs -t ext4 /dev/sdb1



Create an xfs file system:
==============================


#mkfs.xfs /dev/sdb1
#mkfs -t xfs /dev/sdb1



Partition Table
==================
Partition can be considered as a piece of disk space.A partition table is a partition of a disk that contains 
information about sizes and locations of partitions on hard disk and it is located at the first sector of the disk. 
The two most popular partition tables are MBR and GPT.

1.Master Boot Record (MBR) partition
2.GUID Partition Table (GPT) partition

MBR (dos) partition
---------------
We can create max 4 partition
3 primary
1 Extended

GPT partition
--------------
we can create 128 partition

lsblk command
================
lsblk command is used to list information about all available block devices in Linux

#lsblk
#lsblk /dev/sdb
#lsblk -o name,size

IDE --> /dev/hda
SCSI and SATA -->/dev/sda
AWS(xen) -- >/dev/xvda
Nvme --> /dev/nvme0n1

commands to create partition
==============================

#fdisk

# fdisk -l
# fdisk /dev/sdb

#partprobe /dev/sdb

Commad to create file system
==================================
#mkfs.ext4 <device name>

#mkfs.xfs /dev/sdb
#mkfs.xfs /dev/sdb1


check the file system status
==============================
#file -s /dev/sdc3


mount the file system
======================
#mkdir /oracle

mount /dev/sdb1 /oracle
#mount
#umount


Command to check the mounted filesystem
============================================
#df -h
#df -hT

#lsblk

command to check the blockid of devices
==========================================
#blkid

#mount
#umount

scan\detect new LUN’s & SCSI disks in Linux
=============================================

#ls /sys/class/scsi_host/

# echo '- - -' > /sys/class/scsi_host/host0/scan


Temporary Mount file
======================
/etc/mtab

Permanent mount file
=====================
/etc/fstab

fields in /etc/fstab

<Device name>	<Mount point>	<File system>	<Options>	<Backup operation> 	<File system check order>

/dev/sdb1       	/prod-data      	xfs    		 defaults 	0 					0


Device – the first field specifies the mount device. These are usually device filenames. Most distributions now specify partitions by their labels or UUIDs.

Mount point – the second field specifies the mount point, the directory where the partition or disk will be mounted. This should usually be an empty directory in another file system.

File system type – the third field specifies the file system type.

Options – the fourth field specifies the mount options. Most file systems support several mount options, which modify how the kernel treats the file system. You may specify multiple mount options, separated by commas.

Backup operation – the fifth field contains a 1 if the dump utility should back up a partition or a 0 if it shouldn’t. If you never use the dump backup program, you can ignore this option.

File system check order – the sixth field specifies the order in which fsck checks the device/partition for errors at boot time. A 0 means that fsck should not check a file system. Higher numbers represent the check order. The root partition should have a value of 1 , and all others that need to be checked should have a value of 2.



commands to resizeing the file system
==========================================

After extending the device partition

ext4 file system
=================
#resize2fs <mount point>
#resize2fs /prod_data
#resize2fs /dev/vg_data/lv_data
#df -h 

xfs fileystem
==============
#xfs_growfs <mount point>
#xfs_growfs /oracle_data
#df -h

scan disk - echo '- - -' > /sys/class/scsi_host/host0/scan
remove disk from vm level -  echo 1 > /sys/class/block/sdc/device/delete 

create filesystem using raw disk
==================================
selete VM ---> setting ---> attach disk
scan disk  (scan disk - echo '- - -' > /sys/class/scsi_host/host0/scan)
lsblk
sdb -  raw disk
mkfs.xfs /dev/sdb
create mount point - /data1
mount /dev/sdb /data1
for permanent mount add fstab entry


create filesystem with partition
=================================
selete VM ---> setting ---> attach disk
scan disk 
lsblk
sdc - create partition using fdisk /dev/sdc
sdc1
sdc2
partprobe /dev/sdc 

mkfs.xfs /dev/sdc1
mkfs.xfs /dev/sdc2
create mount point - /data-1,/data-2
mount /dev/sdc1 /data-1
mount /dev/sdc2 /data-2
for permanent mount add fstab entry
